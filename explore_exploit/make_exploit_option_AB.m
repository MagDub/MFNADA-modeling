
function [chosenOptionFreqAB,chosenOptionFreqAB_desc, exploitMatAllPart_LH, exploitMatAllPart_LH_desc, FreqisExploited, FreqisExplored, exploitTreeisA, exploitTreeisB]=make_exploit_option_AB()

    %run_make_exploit_option
    FreqisExploited = {};
    FreqisExplored = {};
    chosenOptionFreq = nan(60,6);
    load('D:\MaggiesFarm\2019_01_07_NADA_explore\MaggiesFarm_task\2019_07_01_apple_task_training\data_analysis\part_501\mat_AB_desc.mat')

    for part=1:60

        % start loop
        tmp = load(strcat('D:\MaggiesFarm\2019_01_07_NADA_explore\MaggiesFarm_task\2019_07_01_apple_task_training\data_analysis\part_',num2str(500+part),'\mat_AB.mat'));

        meanA=mean([tmp.mat_AB(:,5),tmp.mat_AB(:,6),tmp.mat_AB(:,7)]')';
        stdA=std([tmp.mat_AB(:,5),tmp.mat_AB(:,6),tmp.mat_AB(:,7)]')';
        maxA=max(tmp.mat_AB(:,5),max(tmp.mat_AB(:,6),tmp.mat_AB(:,7)));
        minA=min(tmp.mat_AB(:,5),min(tmp.mat_AB(:,6),tmp.mat_AB(:,7)));

        valueB=tmp.mat_AB(:,8);
        chosen=tmp.mat_AB(:,9);
        hor=tmp.mat_AB(:,3);
        gameID=tmp.mat_AB(:,4);
        sizeChosenApple=tmp.mat_AB(:,10);
        block=tmp.mat_AB(:,1);
        blocktrial=tmp.mat_AB(:,2);

        values = [meanA,valueB];
        [maxValues,IndmaxValues] = max(values');
        exploitTree=IndmaxValues';
        exploitTreeValue=maxValues';

        exploitMat=[hor,exploitTree,chosen,gameID,sizeChosenApple,block,blocktrial,exploitTreeValue];
        exploitMat_SH=exploitMat(exploitMat(:,1)==6,2:8);
        exploitMat_LH=exploitMat(exploitMat(:,1)==11,2:8);

        % SH
        exploitChosenSH = exploitMat_SH(:,1)==exploitMat_SH(:,2);
        exploreChosenSH = [];
            for i=1:size(exploitMat_SH,1)
                exploreChosenSH(end+1,1)=((exploitMat_SH(i,1)==1)&&(exploitMat_SH(i,2)==2))||((exploitMat_SH(i,1)==2)&&(exploitMat_SH(i,2)==1));
            end
        novelChosenSH = exploitMat_SH(:,2)==3;

        % LH
        exploitChosenLH = exploitMat_LH(:,1)==exploitMat_LH(:,2);
        exploreChosenLH = [];
            for i=1:size(exploitMat_LH,1)
                exploreChosenLH(end+1,1)=((exploitMat_LH(i,1)==1)&&(exploitMat_LH(i,2)==2))||((exploitMat_LH(i,1)==2)&&(exploitMat_LH(i,2)==1));
            end
        novelChosenLH = exploitMat_LH(:,2)==3;

        exploitMatAllPart_LH_desc = {'exploitTree','chosen','gameID','sizeChosenApple','block','blocktrial', 'exploitTreevalue'};
        exploitMatAllPart_LH{part}=exploitMat_LH;

        FreqisExploited{part}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==1),1);
        FreqisExploited{part}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==1),1);
        FreqisExploited{part}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==2),1);
        FreqisExploited{part}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==2),1);
        
        FreqisExplored{part}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==1),2)==2),1); % exploit is A, B is explored
        FreqisExplored{part}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==1),2)==2),1);
        FreqisExplored{part}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==2),2)==1),1); % exploit is B, A is explored
        FreqisExplored{part}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==2),2)==1),1);
        
        % exploitSH, exploreSH, novelSH, exploitLH, exploreLH, novelLH
        chosenOptionFreq(part,:)=sum([exploitChosenSH,exploreChosenSH,novelChosenSH,exploitChosenLH,exploreChosenLH,novelChosenLH]); 
        
        exploitTreeisA(part) = size(find(exploitTree==1),1);
        exploitTreeisB(part) = size(find(exploitTree==2),1);
    end

    chosenOptionFreqAB_desc={'exploitSH', 'exploreSH','novelSH', 'exploitLH', 'exploreLH', 'novelLH'};
    chosenOptionFreqAB = chosenOptionFreq/50;

end

