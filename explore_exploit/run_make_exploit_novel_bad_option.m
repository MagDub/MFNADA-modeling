
close all;

[chosenOptionFreqABD,chosenOptionFreqABD_desc,exploitMatABD_LH, exploitMatABD_LH_desc]=make_exploit_option_ABD();
[chosenOptionFreqAB,chosenOptionFreqAB_desc,exploitMatAB_LH, exploitMatAB_LH_desc]=make_exploit_option_AB();
[chosenOptionFreqBD,chosenOptionFreqBD_desc,exploitMatBD_LH, exploitMatBD_LH_desc]=make_exploit_option_BD();
[chosenOptionFreqAD,chosenOptionFreqAD_desc,exploitMatAD_LH, exploitMatAD_LH_desc]=make_exploit_option_AD();

chosenOption.ABD.desc = chosenOptionFreqABD_desc;
chosenOption.ABD.freq = chosenOptionFreqABD;
chosenOption.AB.desc = chosenOptionFreqAB_desc;
chosenOption.AB.freq = chosenOptionFreqAB;
chosenOption.BD.desc = chosenOptionFreqBD_desc;
chosenOption.BD.freq = chosenOptionFreqBD;
chosenOption.AD.desc = chosenOptionFreqAD_desc;
chosenOption.AD.freq = chosenOptionFreqAD;

save('D:\writing\MF\data_for_figs\chosenOption.mat', 'chosenOption')


for part=1:60
    tmpABD=exploitMatABD_LH{part};
    tmpAB=exploitMatAB_LH{part};
    tmpBD=exploitMatBD_LH{part};
    tmpAD=exploitMatAD_LH{part};
    tmp_exploited=[tmpABD(:,1)==tmpABD(:,2),tmpABD(:,3),tmpABD(:,4),tmpABD(:,5),tmpABD(:,6),tmpABD(:,2), tmpABD(:,7);...
                    tmpAB(:,1)==tmpAB(:,2),tmpAB(:,3),tmpAB(:,4),tmpAB(:,5),tmpAB(:,6),tmpAB(:,2), tmpAB(:,7);...
                    tmpBD(:,1)==tmpBD(:,2),tmpBD(:,3),tmpBD(:,4),tmpBD(:,5),tmpBD(:,6),tmpBD(:,2), tmpBD(:,7);...
                    tmpAD(:,1)==tmpAD(:,2),tmpAD(:,3),tmpAD(:,4),tmpAD(:,5),tmpAD(:,6),tmpAD(:,2), tmpAD(:,7)];
    exploited{part}=tmp_exploited;
    mean_per_part_exploited(part,:)= mean(tmp_exploited(tmp_exploited(:,1)==1,3));
    mean_per_part_explored(part,:)=mean(tmp_exploited(tmp_exploited(:,1)==0,3));
    
    mat_explored_C = [];
    mat_explored_B = [];
    mat_explored_A = [];
    mat_explored_D = [];
    mat_exploited = [];
    
    for i=1:size(tmp_exploited,1)
        if tmp_exploited(i,1) == 0  % exploration
            if tmp_exploited(i,6) == 3   % selected C
                mat_explored_C(end+1,:)=tmp_exploited(i,:);
            elseif tmp_exploited(i,6) == 4   % selected D
                mat_explored_D(end+1,:)=tmp_exploited(i,:);
            elseif tmp_exploited(i,6) == 2   % selected B
                mat_explored_B(end+1,:)=tmp_exploited(i,:);
            elseif tmp_exploited(i,6) == 1   % selected A
                mat_explored_A(end+1,:)=tmp_exploited(i,:);
            end
        elseif tmp_exploited(i,1) == 1  % exploitation
            mat_exploited(end+1,:)=tmp_exploited(i,:);
        end
    end
    
    if (size(mat_explored_C,1)+size(mat_explored_A,1)+size(mat_explored_B,1)+size(mat_explored_D,1)+size(mat_exploited,1)) ~= 200
        disp('problem, should be 200')
    end
    
    mean_per_part_exploited = [mean(mat_exploited(:,3)) size(mat_exploited(:,3),1)];
    mean_per_part_explored = [mean(tmp_exploited(tmp_exploited(:,1)==0,3)) size(tmp_exploited(tmp_exploited(:,1)==0,3),1)];
    
    if isempty(mat_explored_A)
        mean_per_part_explored_A = [nan 0];
    else
        mean_per_part_explored_A = [mean(mat_explored_A(:,3)) size(mat_explored_A(:,3),1)];
    end
    
    if isempty(mat_explored_B)
        mean_per_part_explored_B = [nan 0];
    else
        mean_per_part_explored_B = [mean(mat_explored_B(:,3)) size(mat_explored_B(:,3),1)];
    end
    
    if isempty(mat_explored_C)
        mean_per_part_explored_C = [nan 0];
    else
        mean_per_part_explored_C = [mean(mat_explored_C(:,3)) size(mat_explored_C(:,3),1)];
    end
    
    if isempty(mat_explored_D)
        mean_per_part_explored_D = [nan 0];
    else
        mean_per_part_explored_D = [mean(mat_explored_D(:,3)) size(mat_explored_D(:,3),1)];
    end    
end

exploited_desc = {'Exploited','GameID','SizePicked','Block','BlockTrial','FirstChosen','SizeExploitationOption'}; 
mean_per_part_desc = {'Mean','Number of trials averaged'};

[apple_sizes_LH, apple_sizes_LH_desc] = make_explore_exploit_averages(); %problem, apple_sizes for participant > 1 does not have 100 unique trialID

score_mat_all_apples_percond = {};

for part=1:60
    
    tmp = exploited{part};
    tmp_app = apple_sizes_LH{part};

    mat_exploit(:,1) = tmp(:,4)*1000+tmp(:,5); % BlocktrialID
    mat_exploit(:,2) = tmp(:,1); % exploited
    mat_exploit(:,3) = tmp(:,3); % size picked
    mat_exploit(:,4) = tmp(:,6); % first picked
    mat_exploit(:,5) = tmp(:,7); %size of exploitation option
    if size(unique(mat_exploit(:,1)),1)~=200
        disp('problem, should be 200 trials')
    end
    
    mat_exploit_app(:,1) = tmp_app(:,1)*1000+tmp_app(:,2); %BlocktrialID
    mat_exploit_app(:,2:7) = tmp_app(:,4:9); % all apples picked
    if size(unique(mat_exploit_app(:,1)),1)~=200
        disp('problem, should be 200 trials')
    end

    % Match the 2 BlockTrialIDs
    sorted_mat_exploit=sortrows(mat_exploit,1); % should be 200
    sorted_mat_exploit_app=sortrows(mat_exploit_app,1); % should be 200

    if unique(sorted_mat_exploit(:,1)==sorted_mat_exploit_app(:,1))==1 && unique(sorted_mat_exploit(:,3)==sorted_mat_exploit_app(:,2))==1
        score_mat_all_apples_percond{part} = [sorted_mat_exploit(:,1:2) sorted_mat_exploit_app(:,2:7) sorted_mat_exploit(:,4:5)]; %add 1st picked, + exploitation size
    else
        disp('gameIDs or size of 1st app dont match')
    end
end

% BlocktrialID = Block*1000+trial
score_mat_all_apples_percond_desc = {'BlocktrialID','isExploited','Apple1Size','Apple2Size','Apple3Size','Apple4Size','Apple5Size','Apple6Size','1stPicked', 'SizeExploitationOption'};

% score_mat_all_apples_percond_part1=score_mat_all_apples_percond{1};
% size(score_mat_all_apples_percond_part1(find(score_mat_all_apples_percond_part1(:,2)==1),:),1)
% size(score_mat_all_apples_percond_part1(find(score_mat_all_apples_percond_part1(:,2)==0),:),1)

save('D:\writing\MF\data_for_figs\score_mat_all_apples_percond.mat','score_mat_all_apples_percond')
save('D:\writing\MF\data_for_figs\score_mat_all_apples_percond_desc.mat','score_mat_all_apples_percond_desc') 


