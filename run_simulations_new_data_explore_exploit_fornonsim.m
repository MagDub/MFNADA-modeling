
for ID = 501:560
    
    disp(ID)
    
    %% settings
    settings = [];
    settings.task.N_games = 400;
    settings.task.N_hor = 2;
    settings.task.Ngames_per_hor = settings.task.N_games / settings.task.N_hor;

    
    %% get data
    data_dir = 'D:\MaggiesFarm\2019_01_07_NADA_explore\MaggiesFarm_task\2019_07_01_apple_task_training\data\';
    [data,gameIDs] = aggregateData(ID,data_dir);
    
    exploitischosen=nan(settings.task.N_hor,settings.task.Ngames_per_hor);
    novelischosen=nan(settings.task.N_hor,settings.task.Ngames_per_hor);
    badischosen=nan(settings.task.N_hor,settings.task.Ngames_per_hor);
    exploreischosen=nan(settings.task.N_hor,settings.task.Ngames_per_hor);
    
    %% loop through trials (and conditions) to generate behaviour
    for c = 1:settings.task.N_hor
        for g = 1:settings.task.Ngames_per_hor         
        
            % data
            tmp_dat = data(c,g);

            if tmp_dat.unshown_tree == 1
                tmp_dat = rmfield(tmp_dat,'a');
            elseif tmp_dat.unshown_tree == 2
                tmp_dat = rmfield(tmp_dat,'b');
            elseif tmp_dat.unshown_tree == 3
                tmp_dat = rmfield(tmp_dat,'c');
            elseif tmp_dat.unshown_tree == 4
                tmp_dat = rmfield(tmp_dat,'d');
            end

            % loop through trials of game
            for t = 1:size(tmp_dat.alltrees,1)+1 %CHANGED
                
                mo.mat.appleA{c,g} = data(c,g).a;
                mo.mat.appleB{c,g} = data(c,g).b;
                mo.mat.appleD{c,g} = data(c,g).d;

                if tmp_dat.unshown_tree == 1
                    exploitTree(g,c)=2;
                elseif tmp_dat.unshown_tree == 2
                    exploitTree(g,c)=1;
                elseif tmp_dat.unshown_tree == 3 || tmp_dat.unshown_tree == 4
                    valueA = mean(data(c,g).a)';
                    valueB = mo.mat.appleB{c,g};
                    values = [valueA, valueB];
                    [maxValues,IndmaxValues] = max(values'); %problem sometimes both have the same value
                    exploitTree(g,c)=IndmaxValues;
                end
            end

            %  policy
                if tmp_dat.unshown_tree == 1                    
                    if data(c,g).chosen==2
                        exploitischosen(c,g)=1;
                    elseif data(c,g).chosen==3
                        novelischosen(c,g)=1;
                    elseif data(c,g).chosen==4
                        badischosen(c,g)=1;
                    end                   
                elseif tmp_dat.unshown_tree == 2                   
                    if data(c,g).chosen==1
                        exploitischosen(c,g)=1;
                    elseif data(c,g).chosen==3
                        novelischosen(c,g)=1;
                    elseif data(c,g).chosen==4
                        badischosen(c,g)=1;
                    end                   
                elseif tmp_dat.unshown_tree == 3                  
                    if data(c,g).chosen==exploitTree(g,c)
                        exploitischosen(c,g)=1;
                    elseif data(c,g).chosen==4
                        badischosen(c,g)=1;
                    else
                        exploreischosen(c,g)=1;
                    end   
                elseif tmp_dat.unshown_tree == 4                  
                    if data(c,g).chosen==exploitTree(g,c)
                        exploitischosen(c,g)=1;
                    elseif data(c,g).chosen==3
                        novelischosen(c,g)=1;
                    else
                        exploreischosen(c,g)=1;
                    end                    
                end
        end
    end
    
    exploitischosen_SH = nansum(exploitischosen(1,:));
    exploreischosen_SH = nansum(exploreischosen(1,:));
    novelischosen_SH = nansum(novelischosen(1,:));
    badischosen_SH = nansum(badischosen(1,:));
    
    exploitischosen_LH = nansum(exploitischosen(2,:));
    exploreischosen_LH = nansum(exploreischosen(2,:));
    novelischosen_LH = nansum(novelischosen(2,:));
    badischosen_LH = nansum(badischosen(2,:));
    
    average_SH(ID-500,:) = [exploitischosen_SH, exploreischosen_SH, novelischosen_SH, badischosen_SH];
    average_LH(ID-500,:) = [exploitischosen_LH, exploreischosen_LH, novelischosen_LH, badischosen_LH];

end
 
non_sim_prob_choosing_exploit_trees_new_data_desc = {'Exploit_SH', 'Explore_SH', 'C_SH', 'D_SH', 'Exploit_LH', 'Explore_LH', 'C_LH', 'D_LH'};
non_sim_prob_choosing_exploit_trees_new_data = [average_SH/200, average_LH/200];

save('D:\writing\MF\data_for_figs\non_sim_prob_choosing_exploit_trees_new_data.mat', 'non_sim_prob_choosing_exploit_trees_new_data');
save('D:\writing\MF\data_for_figs\non_sim_prob_choosing_exploit_trees_new_data_desc.mat', 'non_sim_prob_choosing_exploit_trees_new_data_desc');

